import "./DashboardTags.css"
import "./DashboardTask.css"
import Header from "../header/Header"
import Menu from "../menuLateral/menu"
import { useEffect, useState } from "react"
import axios from "axios"

interface Task{
  task_id:number
  content: string
  due_date: string
  priority: string
  is_completed: boolean
  title: string
  tag_id: number
  user_id: number
  created_at: string
}

interface Tag{
  tag_id: number
  user_id: number
  name: string
  color: string
}

function DashboardTask(){
  const [task, setTask] = useState<Task[]>([])

  const [dataInput, setData] = useState<string>('')

  const [tags, setTags] = useState<Tag[]>([]);

  
  useEffect(() => {
    const dataAtual = new Date();
    setData(`${dataAtual.getFullYear()}-${dataAtual.getMonth() + 1}-${dataAtual.getDate()}`);

    const getTask = async () =>{
      const res = await axios.get<Task[]>(`https://to-do-list-backend-qijk.onrender.com/tasks`, { 
        headers: {
          Authorization: `Bearer ${getTokenFromMemory()}`,
        },
      })
      setTask(res.data)
    }
    getTask();

    const getTags = async () =>{
      const res = await axios.get<Tag[]>(`https://to-do-list-backend-qijk.onrender.com/tags`, { 
        headers: {
          Authorization: `Bearer ${getTokenFromMemory()}`,
        },
      })
      setTags(res.data)
    }
    getTags()
  }, []);

  const tagForCard = (tagId: number): Tag | undefined => {
    const foundTag = tags.find(tag => tag.tag_id === tagId);
    return foundTag;
  };

  const handleIconClick = async (value: Task) => {
    const confirmation = window.confirm("Deseja concluir essa Task?")

    if (confirmation){
      value.is_completed = true;
      const res = await axios.put(`https://to-do-list-backend-qijk.onrender.com/tasks/${value.task_id}`,value,{
        headers: {
          Authorization: `Bearer ${getTokenFromMemory()}`,
        },
      })
  
      if (res.status == 200){ window.location.reload();}
    }    
  };


  const renderTasks = (data:Task[]) =>{
    return data.map((value) =>{
      if (value.is_completed == false  && dataInput == value.due_date.substring(0,10)){
        return (
          <div className="row">
            <div className={`card ${value.priority}`}>
              <div className="head">
              <svg onClick={() => handleIconClick(value)} width="25" height="25" viewBox="0 0 33 33" fill="none" xmlns="http://www.w3.org/2000/svg">
      <circle cx="16.5" cy="16.5" r="16"/>
              </svg>
      
                <p>{value.title}</p>
              </div>
              <div id="descicao">
                <p >{value.content}</p>
              </div>
              
              <div className="footer">
                <div className="categ">
                  <svg width="19" height="19" viewBox="0 0 19 19" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g clipPath="url(#clip0_57_100)">
        <path fillRule="evenodd" clipRule="evenodd" d="M8.29825 8.32612C8.17443 8.44993 8.17443 8.65007 8.29825 8.77388L10.1983 10.6739C10.26 10.7356 10.3411 10.7667 10.4221 10.7667C10.5032 10.7667 10.5843 10.7356 10.646 10.6739C10.7698 10.5501 10.7698 10.3499 10.646 10.2261L8.74602 8.32612C8.6222 8.2023 8.42207 8.2023 8.29825 8.32612ZM7.47935 9.59278C7.35553 9.46897 7.1554 9.46897 7.03158 9.59278C6.90777 9.7166 6.90777 9.91673 7.03158 10.0406L8.93158 11.9406C8.99333 12.0023 9.0744 12.0333 9.15547 12.0333C9.23653 12.0333 9.3176 12.0023 9.37935 11.9406C9.50317 11.8167 9.50317 11.6166 9.37935 11.4928L7.47935 9.59278ZM6.21268 10.8595C6.08887 10.7356 5.88873 10.7356 5.76492 10.8595C5.6411 10.9833 5.6411 11.1834 5.76492 11.3072L7.66492 13.2072C7.72667 13.269 7.80773 13.3 7.8888 13.3C7.96987 13.3 8.05093 13.269 8.11268 13.2072C8.2365 13.0834 8.2365 12.8833 8.11268 12.7595L6.21268 10.8595ZM12.191 10.1333L8.8388 6.7811L4.2199 11.4L7.57213 14.7522L12.191 10.1333ZM9.06268 6.10945L12.8627 9.90945C12.9865 10.0333 12.9865 10.2334 12.8627 10.3572L7.79602 15.4239C7.73427 15.4856 7.6532 15.5167 7.57213 15.5167C7.49107 15.5167 7.41 15.4856 7.34825 15.4239L3.54825 11.6239C3.42443 11.5001 3.42443 11.2999 3.54825 11.1761L8.61492 6.10945C8.73873 5.98563 8.93887 5.98563 9.06268 6.10945ZM16.4309 11.5821C16.2795 11.4931 16.0857 11.5441 15.9974 11.6951L12.3677 17.886C12.1055 18.3398 11.5232 18.4959 11.0836 18.2425L10.3765 17.7843C10.2302 17.689 10.0339 17.7311 9.9389 17.8777C9.84358 18.0247 9.88538 18.2207 10.0323 18.3157L10.753 18.7828C11.0016 18.9262 11.2737 18.9943 11.5422 18.9943C12.0897 18.9943 12.6227 18.7109 12.9149 18.2045L16.5436 12.0153C16.632 11.8646 16.5816 11.6708 16.4309 11.5821ZM18.9721 1.58333V6.65C18.9721 7.62977 18.6605 8.35968 17.9293 9.09055L8.52498 18.5082C8.22573 18.8075 7.828 18.9718 7.40493 18.9718C6.98187 18.9718 6.58445 18.8075 6.28583 18.5082L0.463917 12.6866C0.164667 12.3874 0 11.9896 0 11.5666C0 11.1435 0.164667 10.7461 0.463917 10.4472L8.68902 2.23313C6.53822 1.7442 5.20347 1.71127 4.8127 1.82558C4.97768 1.99437 5.49163 2.35283 6.73202 2.84177C6.89478 2.90605 6.97458 3.08972 6.91062 3.25248C6.84633 3.41525 6.66235 3.4941 6.4999 3.43108C3.93237 2.41902 4.08247 1.85788 4.13915 1.64667C4.25663 1.2065 4.88395 1.05988 6.16898 1.1723C7.21557 1.26382 8.56647 1.5219 9.97278 1.89842C11.3791 2.27525 12.6774 2.72713 13.6293 3.17142C14.7994 3.71703 15.2684 4.15688 15.1503 4.59737C15.0363 5.02233 14.4438 5.07427 14.2491 5.09137C14.2399 5.09232 14.2304 5.09263 14.2212 5.09263C14.0587 5.09263 13.9207 4.96818 13.9061 4.80352C13.8906 4.62935 14.0195 4.47577 14.194 4.46057C14.3289 4.44885 14.4185 4.43048 14.4764 4.41402C14.3409 4.27247 13.9979 4.05175 13.4495 3.78892C13.3345 3.98272 13.2721 4.20533 13.2721 4.43333C13.2721 5.1319 13.8402 5.7 14.5388 5.7C15.2374 5.7 15.8055 5.1319 15.8055 4.43333C15.8055 3.73477 15.2374 3.16667 14.5388 3.16667C14.3637 3.16667 14.2221 3.02512 14.2221 2.85C14.2221 2.67488 14.3637 2.53333 14.5388 2.53333C15.5867 2.53333 16.4388 3.38548 16.4388 4.43333C16.4388 5.48118 15.5867 6.33333 14.5388 6.33333C13.491 6.33333 12.6388 5.48118 12.6388 4.43333C12.6388 4.11572 12.7224 3.80633 12.8715 3.5302C12.1138 3.21195 11.0973 2.8557 9.80907 2.51022C9.67322 2.4738 9.54243 2.44055 9.41165 2.4073L0.911683 10.8952C0.732133 11.0745 0.633333 11.3132 0.633333 11.5666C0.633333 11.8205 0.732133 12.059 0.911683 12.2385L6.7336 18.0605C7.09238 18.4192 7.71812 18.4192 8.0769 18.0605L17.4813 8.64278C18.0984 8.02592 18.3388 7.467 18.3388 6.65V1.58333C18.3388 1.05957 17.9126 0.633333 17.3888 0.633333H12.3221C11.5051 0.633333 10.9462 0.873684 10.3293 1.49055C10.2055 1.61437 10.0054 1.61437 9.88158 1.49055C9.75777 1.36673 9.75777 1.1666 9.88158 1.04278C10.6124 0.3116 11.3424 0 12.3221 0H17.3888C18.2619 0 18.9721 0.710283 18.9721 1.58333Z" fill={tagForCard(value.tag_id)?.color}/>
        </g>
        <defs>
        <clipPath id="clip0_57_100">
        <rect width="19" height="19" fill="white"/>
        </clipPath>
        </defs>
                  </svg>
                  <span style={{color : `${tagForCard(value.tag_id)?.color}`}}>{tagForCard(value.tag_id)?.name}</span>
                </div>

                <div className="menuBtns">
                  <a href={`/deletetask/${value.task_id}`}>
                    <svg width="20" height="20" viewBox="0 0 36 36" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M27.0068 34.875H9.00677C8.11167 34.875 7.25322 34.5194 6.62029 33.8865C5.98735 33.2536 5.63177 32.3951 5.63177 31.5V10.125C5.63177 9.82663 5.7503 9.54048 5.96128 9.32951C6.17226 9.11853 6.45841 9 6.75677 9C7.05514 9 7.34129 9.11853 7.55227 9.32951C7.76325 9.54048 7.88177 9.82663 7.88177 10.125V31.5C7.88177 31.7984 8.0003 32.0845 8.21128 32.2955C8.42226 32.5065 8.70841 32.625 9.00677 32.625H27.0068C27.3051 32.625 27.5913 32.5065 27.8023 32.2955C28.0132 32.0845 28.1318 31.7984 28.1318 31.5V10.125C28.1318 9.82663 28.2503 9.54048 28.4613 9.32951C28.6723 9.11853 28.9584 9 29.2568 9C29.5551 9 29.8413 9.11853 30.0523 9.32951C30.2632 9.54048 30.3818 9.82663 30.3818 10.125V31.5C30.3818 32.3951 30.0262 33.2536 29.3933 33.8865C28.7603 34.5194 27.9019 34.875 27.0068 34.875Z" fill="#FF0404"/>
      <path d="M31.5068 7.875H4.50677C4.20841 7.875 3.92226 7.75647 3.71128 7.54549C3.5003 7.33452 3.38177 7.04837 3.38177 6.75C3.38177 6.45163 3.5003 6.16548 3.71128 5.95451C3.92226 5.74353 4.20841 5.625 4.50677 5.625H31.5068C31.8051 5.625 32.0913 5.74353 32.3023 5.95451C32.5132 6.16548 32.6318 6.45163 32.6318 6.75C32.6318 7.04837 32.5132 7.33452 32.3023 7.54549C32.0913 7.75647 31.8051 7.875 31.5068 7.875Z" fill="#FF0404"/>
      <path d="M22.5068 7.875C22.2084 7.875 21.9223 7.75647 21.7113 7.5455C21.5003 7.33452 21.3818 7.04837 21.3818 6.75V3.375H14.6318V6.75C14.6318 7.04837 14.5132 7.33452 14.3023 7.5455C14.0913 7.75647 13.8051 7.875 13.5068 7.875C13.2084 7.875 12.9223 7.75647 12.7113 7.5455C12.5003 7.33452 12.3818 7.04837 12.3818 6.75V2.25C12.3818 1.95163 12.5003 1.66548 12.7113 1.4545C12.9223 1.24353 13.2084 1.125 13.5068 1.125H22.5068C22.8051 1.125 23.0913 1.24353 23.3023 1.4545C23.5132 1.66548 23.6318 1.95163 23.6318 2.25V6.75C23.6318 7.04837 23.5132 7.33452 23.3023 7.5455C23.0913 7.75647 22.8051 7.875 22.5068 7.875Z" fill="#FF0404"/>
      <path d="M18.0068 29.25C17.7084 29.25 17.4223 29.1315 17.2113 28.9205C17.0003 28.7095 16.8818 28.4234 16.8818 28.125V12.375C16.8818 12.0766 17.0003 11.7905 17.2113 11.5795C17.4223 11.3685 17.7084 11.25 18.0068 11.25C18.3051 11.25 18.5913 11.3685 18.8023 11.5795C19.0132 11.7905 19.1318 12.0766 19.1318 12.375V28.125C19.1318 28.4234 19.0132 28.7095 18.8023 28.9205C18.5913 29.1315 18.3051 29.25 18.0068 29.25Z" fill="#FF0404"/>
      <path d="M23.6318 27C23.3334 27 23.0473 26.8815 22.8363 26.6705C22.6253 26.4595 22.5068 26.1734 22.5068 25.875V14.625C22.5068 14.3266 22.6253 14.0405 22.8363 13.8295C23.0473 13.6185 23.3334 13.5 23.6318 13.5C23.9301 13.5 24.2163 13.6185 24.4273 13.8295C24.6382 14.0405 24.7568 14.3266 24.7568 14.625V25.875C24.7568 26.1734 24.6382 26.4595 24.4273 26.6705C24.2163 26.8815 23.9301 27 23.6318 27Z" fill="#FF0404"/>
      <path d="M12.3818 27C12.0834 27 11.7973 26.8815 11.5863 26.6705C11.3753 26.4595 11.2568 26.1734 11.2568 25.875V14.625C11.2568 14.3266 11.3753 14.0405 11.5863 13.8295C11.7973 13.6185 12.0834 13.5 12.3818 13.5C12.6801 13.5 12.9663 13.6185 13.1773 13.8295C13.3882 14.0405 13.5068 14.3266 13.5068 14.625V25.875C13.5068 26.1734 13.3882 26.4595 13.1773 26.6705C12.9663 26.8815 12.6801 27 12.3818 27Z" fill="#FF0404"/>
                    </svg>
                  </a>
                  <a href={`/updatetask/${value.task_id}`}>
                    <svg width="20" height="20" viewBox="0 0 36 35" fill="none" xmlns="http://www.w3.org/2000/svg">
    <g clipPath="url(#clip0_39_910)">
    <path d="M31.9651 2.38351L33.5611 3.9107C35.3144 5.61243 35.3144 8.3832 33.5611 10.0849L32.9991 10.674L25.0641 2.97257L25.6036 2.38351C27.3569 0.659964 30.2117 0.659964 31.9651 2.38351Z" fill="#FF9999"/>
    <path d="M28.6157 14.9283L12.2511 30.8329L4.29352 23.1097L20.6807 7.2269L28.6157 14.9283Z" fill="#FFD580"/>
    <path d="M1.90288 31.6042L3.49889 33.1532C3.93835 33.5797 4.64981 33.5797 5.08815 33.1532C5.52761 32.7267 5.52761 32.0362 5.08815 31.6107L3.49214 30.0617C3.05268 29.6352 2.34122 29.6352 1.90288 30.0617C1.46454 30.4871 1.46454 31.1787 1.90288 31.6042Z" fill="#664848"/>
    <path d="M36 6.99782C36.0011 5.6048 35.4504 4.20197 34.3557 3.13948L34.35 3.13402L32.754 1.60683L32.7529 1.60792C31.6616 0.539974 30.2184 -0.00108921 28.7843 1.64617e-06C27.3456 -0.00108921 25.8957 0.542155 24.8032 1.61665L24.7628 1.6581L24.2446 2.22316L19.8849 6.45458L3.49772 22.3374C3.48311 22.3516 3.47749 22.3712 3.464 22.3865C3.41679 22.4377 3.38308 22.4977 3.34599 22.5577C3.30552 22.6232 3.26619 22.6854 3.24033 22.7563C3.23359 22.7759 3.21786 22.7901 3.21111 22.8108L0.0415834 33.6103C-0.0708112 33.9921 0.0382116 34.4 0.32819 34.6804C0.617044 34.9607 1.0374 35.0665 1.43078 34.9585L12.5578 31.8823C12.5792 31.8769 12.5938 31.8616 12.614 31.854C12.6871 31.8289 12.7512 31.7907 12.8186 31.7514C12.8804 31.7154 12.9422 31.6827 12.9951 31.6358C13.0108 31.6227 13.031 31.6173 13.0456 31.6031L29.4103 15.6985L33.7937 11.4441C33.7993 11.4387 33.8004 11.4321 33.8061 11.4267C33.8117 11.4212 33.8184 11.4201 33.824 11.4147L34.386 10.8256L34.3838 10.8234C35.4571 9.76531 36.0011 8.37775 36 6.99782ZM2.75816 32.3231L4.85095 25.1932L10.1043 30.2919L2.75816 32.3231ZM12.251 29.2894L5.88386 23.1097L20.6806 8.76937L27.0275 14.9294L12.251 29.2894ZM28.6157 13.3859L22.2699 7.2269L25.064 4.51504L31.4098 10.674L28.6157 13.3859ZM32.9552 9.08898L26.6398 2.95948C27.2636 2.44897 28.0166 2.1828 28.7843 2.18171C29.6497 2.1828 30.505 2.50133 31.1648 3.15038L31.176 3.16129L32.7664 4.68303C33.425 5.32227 33.751 6.15459 33.7521 6.99891C33.751 7.74942 33.4767 8.48356 32.9552 9.08898Z" fill="#664848"/>
    </g>
    <defs>
    <clipPath id="clip0_39_910">
    <rect width="36" height="35" fill="white"/>
    </clipPath>
    </defs>
                    </svg>

                  </a>
                </div>
              </div>
      
      
            </div>
        </div>
        )
      }
    })
  }

  const handleDateChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setData(event.target.value);
  };

  

  function getTokenFromMemory(): string | null {
    return localStorage.getItem("token");
  }


  return(
    <>
    <Header></Header>
    <Menu></Menu>

    <div className="containerDash">
  
    <div className="bar">
          <input type="date" name="dataTasks" id="dataTasks" value={dataInput}
        onChange={handleDateChange}/>
          <a className="add" href="/createTask" >
            <svg width="42" height="44" viewBox="0 0 42 44" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M30.9635 20.0508H22.585V11.1299C22.585 10.1953 21.8668 9.43066 20.9891 9.43066C20.1113 9.43066 19.3931 10.1953 19.3931 11.1299V20.0508H11.0146C10.1368 20.0508 9.41867 20.8154 9.41867 21.75C9.41867 22.6846 10.1368 23.4492 11.0146 23.4492H19.3931V32.3701C19.3931 33.3047 20.1113 34.0693 20.9891 34.0693C21.8668 34.0693 22.585 33.3047 22.585 32.3701V23.4492H30.9635C31.8413 23.4492 32.5595 22.6846 32.5595 21.75C32.5595 20.8154 31.8413 20.0508 30.9635 20.0508Z" fill="white"/>
            </svg>

            Add Task
          </a>
    </div>

    <section className="contentTask">
      {renderTasks(task)}
    </section>
    </div>
    </>
  )

}

export default DashboardTask